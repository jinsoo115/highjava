package kr.or.ddit.basic;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Scanner;

public class jdbcTest05 {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		Connection conn = null;
		Statement stmt = null;
		PreparedStatement pstmt = null;
		
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "JINSU", "java");
			
			System.out.println("계좌번호 정보 추가하기");
			System.out.print("계좌번호 : ");
			String bankNo = sc.next();
			
			System.out.println("은 행 명 : ");
			String bankName = sc.next();
			
			System.out.println("예금주명 : ");
			String userName = sc.next();
			
			// Statement객체를 이용하기
			String sql = "insert into bankinfo "
					+ "(bank_no, bank_name, bank_user_name, bank_date) "
					+ "values ('" + bankNo + "', '" + bankName + "', '" + userName + "', sysdate)";
			
			System.out.println("SQL : " + sql);
			
			stmt = conn.createStatement();
			
			// SQL문이 select문일 때 실행은 executeQuery()메서드를 사용하고
			
			// SQL문이 insert, update, delete등과 같이 select 문이 아닐 경우에는
			// executeUpdate()메서드를 사용하여 실행한다.
			// executeUpdate()메서드의 반환값은 작업에 성공한 레코드 수 이다.
			int cnt = stmt.executeUpdate(sql);
			
			System.out.println("반환 값 : " + cnt);
		} catch (SQLException e) {
			// TODO: handle exception
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			if(pstmt!=null) try{pstmt.close();}catch(SQLException e){}
			if(stmt!=null) try{stmt.close();}catch(SQLException e){}
			if(conn!=null) try{conn.close();}catch(SQLException e){}
		}
	}
}
