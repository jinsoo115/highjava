package kr.or.ddit.mvc.controller;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

import kr.or.ddit.mvc.service.IMemberService;
import kr.or.ddit.mvc.service.MemberServiceImpl;
import kr.or.ddit.mvc.vo.MemberVO;
import kr.or.ddit.util.DBUtil;
import kr.or.ddit.util.DBUtil2;
import kr.or.ddit.util.DBUtil3;

public class MemberController {
	private Scanner sc = new Scanner(System.in);
	// Controller는 Service객체를 사용하기 때문에
	// Service객체가 저장될 변수가 필요하다.
	private IMemberService service;
	public MemberController() {
		service = new MemberServiceImpl();
	}
	public static void main(String[] args) {
		new MemberController().memberStart();
	}
	public void memberStart(){
		while(true){
			int choice = displayMenu();
			switch (choice) {
			case 1:			// 추가
				insertMember();
				break;
			case 2:			// 삭제
				deleteMember();
				break;
			case 3:			// 수정
				updateMember();
				break;
			case 4:			//전체 출력
				displayMember();
				break;
			case 5:			// 수정
				updateMember2();
				break;
			case 0:			// 작업 끝.
				System.out.println("작업을 마칩니다.");
				return;

			default:
				System.out.println("번호를 잘못 입력했습니다.");
				System.out.println("다시  입력하세요.");
				break;
			}
		}
	}
	// 회원 정보를 수정하는 메서드(원하는 컬럼 한가지만 수정한다.)
	private void updateMember2() {
		Connection conn = null;
		PreparedStatement pstmt = null;
		System.out.println();
		System.out.println("수정할 회원 정보를 입력하세요.");
		System.out.print("회원Id >> ");
		String memId = sc.next();

		int count = service.getMemberCount(memId);
		if(count == 0){
			System.out.println(memId + "은(는) 없는 회원 ID입니다.");
			System.out.println("수정 작업을 마칩니다.");
			return;
		}
		sc.nextLine();
		System.out.println("수정할 회원 정보를 입력하세요");
		System.out.println("1.이름 	2.전화번호		3.주소");
		int input = sc.nextInt();

		String data = "";
		String field = "";
		//col = input == 1 ? col = "mem_name" :(input==2 ? col = "mem_tel":(input==3 ? col ="mem_addr" : "")); 
		switch (input) {
		case 1:
			System.out.print("새로운 회원이름 >> ");
			data = sc.next();
			field = "mem_name";
			//				sql = "update mymember set mem_name = ? where mem_id = ? ";
			break;
		case 2:
			System.out.print("새로운 전화번호 >> ");
			data = sc.next();
			field = "mem_tel";
			//				sql = "update mymember set mem_tel = ? where mem_id = ? ";
			break;
		case 3:
			sc.nextLine();
			System.out.print("새로운 회원주소 >> ");
			data = sc.nextLine();
			field = "mem_addr";
			//				sql = "update mymember set mem_addr = ? where mem_id = ? ";
			break;
		default:
			break;
		}
		// 수정할 정보를 Map에 추가한다.
		// Key값 정보 = 회원ID(memid), 수정할 컬럼명(field), 수정할 데이터(data)
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("memid", memId);
		paramMap.put("field", field);
		paramMap.put("data", data);
		int cnt = service.updateMember2(paramMap);
		if(cnt>0){
			System.out.println(memId + "회원 정보 수정 성공!!");
		}else{
			System.out.println("회원 정보 수정 실패~~");
		}


	}
	// 회원 정보를 수정하는 메서드
	private void updateMember() {
		System.out.println();
		System.out.println("수정할 회원 정보를 입력하세요.");
		System.out.print("회원ID >> ");
		String memId = sc.next();

		int count = service.getMemberCount(memId);
		if(count == 0){	// 없는 회원이면...
			System.out.println(memId + "은(는) 없는 회원ID 입니다.");
			System.out.println("수정 작업을 마칩니다.");
			return;
		}
		System.out.print("새로운 회원이름 >> ");
		String memName = sc.next();

		System.out.print("새로운 전화번호 >> ");
		String memTel = sc.next();
		sc.nextLine();
		System.out.print("새로운 회원주소 >> ");
		String memAddr = sc.nextLine();

		MemberVO memVo = new MemberVO();
		memVo.setMem_id(memId);
		memVo.setMem_name(memName);
		memVo.setMem_tel(memTel);
		memVo.setMem_addr(memAddr); 
		int cnt = service.updateMember(memVo);
		if(cnt>0){
			System.out.println(memId + "회원 정보 수정 성공!!");
		}else{
			System.out.println("회원 정보 수정 실패~~");
		}

	}
	// 회원 정보를 삭제하는 메서드
	private void deleteMember() {
		System.out.println();
		System.out.println("삭제할 회원 정보를 입력하세요.");
		System.out.print("삭제할 회원ID >> ");
		String memId = sc.next();

		int cnt = service.deleteMember(memId);

		if(cnt>0){
			System.out.println(memId + "회원 정보 삭제 성공!!");
		}else{
			System.out.println(memId + "회원은 등록되지 않았거나  삭제 실패했습니다~~");
		}


	}
	// 메뉴 출력 및 작업번호를 입력 받아 반환하는 메서드
	private int displayMenu(){
		System.out.println();
		System.out.println(" -- 작 업 선 택 -- ");
		System.out.println(" 1. 자 료 추 가");
		System.out.println(" 2. 자 료 삭 제");
		System.out.println(" 3. 자 료 수 정");
		System.out.println(" 4. 전체 자료 출력");
		System.out.println(" 5. 자 료 수 정2");
		System.out.println(" 0. 작 업 끝...");
		System.out.println("----------------");
		System.out.print("작업 선택 >> ");
		int num = sc.nextInt();

		return num;
	}
	// 전체 회원 정보를 출력하는 메서드
	private void displayMember(){
		List<MemberVO> memList = service.getAllMember();

		System.out.println();
		System.out.println("--------------------------------");
		System.out.println(" ID		이름		전화번호		주소");
		System.out.println("--------------------------------");
		if(memList==null || memList.size()==0){
			System.out.println("등록된 회원이 하나도 없습니다.");
		}else{
			for(MemberVO memVo : memList){
				System.out.print(memVo.getMem_id() + "\t");
				System.out.print(memVo.getMem_name() + "\t");
				System.out.print(memVo.getMem_tel() + "\t");
				System.out.println(memVo.getMem_addr() + "\t");
			}
		}
	}
	// 회원 정보를 추가하는 메서드
	private void insertMember() {
		System.out.println();
		System.out.println("추가할 회원 정보를 입력하세요.");
		int count = 0;
		String memId;
		do{
			System.out.print("회원ID >> ");
			memId = sc.next();

			count = service.getMemberCount(memId);
			if(count > 0){
				System.out.println("회원ID가 " + memId + "인 회원은 이미 존재 합니다.");
				System.out.println("다른 ID로 다시 입력하세요.");
				System.out.println();
			}
		}while(count>0);

		System.out.print("회원이름 >> ");
		String memName = sc.next();

		System.out.print("전화번호 >> ");
		String memTel = sc.next();

		sc.nextLine(); // 입력 버터 비우기
		System.out.print("주 소 >> ");
		String memAddr = sc.nextLine();

		// Service로 보낼 MemberVO객체를 생성하고
		// 입력한 자료를 셋팅한다.
		MemberVO memVo = new MemberVO();
		memVo.setMem_id(memId);
		memVo.setMem_name(memName);
		memVo.setMem_tel(memTel);
		memVo.setMem_addr(memAddr); 

		// service의 insert하는 메서드 호출하기
		int cnt = service.insertMember(memVo);

		if(cnt>0){
			System.out.println("insert 성공!!");
		}else{
			System.out.println("insert 실패~~");
		}
	}


}
